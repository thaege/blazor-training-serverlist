@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore

@if (Server != null)
{
    <tr style="background-color: @GetBackGroundColor()">
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color:@(Server.IsOnline ? "green" : "red")">
            @(Server.IsOnline ? "online" : "offline")
        </td>
        <td>
            @if(Server.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 500);
                <text>@randomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </td>
        <td>
            @if(Server.IsOnline)
            {
                <button type="button"
                        class="btn btn-outline-danger"
                        @onclick="@(() => { SetServerStatus(false); })">
                    Turn Off</button>
            }
            else
            {
                <button type="button"
                        class="btn btn-outline-success"
                        @onclick="@(() => { SetServerStatus(true); })">
                    Turn On</button>
            }
            &nbsp;
            <a href="/server/@Server.ServerId" class="btn btn-outline-primary">Edit</a>
        </td>
        <td>
            <EditForm
                Model="Server"
                FormName="@($"form-server-{Server.ServerId}")"
                OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </td>
    </tr>
}

@code {
    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectCity {get; set;}

    [Parameter]
    public Server? Server { get; set; }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers", true);
        }
    }

    private string GetBackGroundColor()
    {
        if (SelectCity != null)
        {
            switch(this.SelectCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default:
                    return "white";
            }
        }
        else
        {
            return "white";
        }
    }

    private void SetServerStatus(bool status)
    {
        if (this.Server is not null)
        {
            if (this.Server.IsOnline != status)
            {
                if (this.Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
                {
                    var num = TorontoOnlineServersStore.GetNumServersOnline();
                    if (status)
                    {
                        TorontoOnlineServersStore.SetNumbersServersOnline(num + 1);
                    }
                    else if (num > 1)
                    {
                        TorontoOnlineServersStore.SetNumbersServersOnline(num - 1);
                    }
                }
                this.Server.IsOnline = status;
            }
        }
        
    }
}