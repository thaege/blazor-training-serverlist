@page "/servers"
@page "/servers/back_from/{cityName}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore

<h3>Servers</h3>
<br/>
<br/>

<CityListComponent
    @ref="cityListComponent"
    SelectedCityCallback="HandleCitySelection"
    selectedCity="@this.selectedCity"></CityListComponent>

<br/>

<SearchServersComponent 
    @ref="searchServersComponent"
    SearchServersCallback="HandleSearchServer"
    style="width: 1000px;"></SearchServersComponent>

<br/>

<CascadingValue Name="SelectedCity" Value="@this.selectedCity">
    <ServerListComponent 
        @rendermode="InteractiveServer"
        CityName="@this.selectedCity"
        ServerFilter="@this.serverFilter"></ServerListComponent>
</CascadingValue>
<br/>
<br/>

<a href="/servername" class="btn btn-link">
    <div class="card-body">
        <button type="button" class="btn btn-primary">Add Server</button>
    </div>
</a>


@code {
    [Parameter]
    public string? CityName { get; set; }

    private string selectedCity = "Toronto";
    private string serverFilter = "";
        
    private CityListComponent? cityListComponent;
    private SearchServersComponent? searchServersComponent;

    private void HandleCitySelection(string cityName)
    {
        this.selectedCity = cityName;
        this.serverFilter = string.Empty;
        this.searchServersComponent?.ClearFilter();
    }

    private void HandleSearchServer(string serverFilter)
    {
        this.serverFilter = serverFilter;
        this.cityListComponent?.ClearSelection();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from")
                && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;

                StateHasChanged();
            }

            var serversToronto = ServersRepository.GetServersByCity("Toronto");
            if (serversToronto is not null)
            {
                TorontoOnlineServersStore.SetNumbersServersOnline(serversToronto.Count(x => x.IsOnline));
            }
        }
    }
}
